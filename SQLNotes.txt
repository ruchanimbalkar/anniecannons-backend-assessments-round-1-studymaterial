# PostgreSQL Cheatsheet

Each student will complete the Description and Example sections for the SQL clause assigned to them.

For each clause:

1. In the **Description**, explain what the clause does in plain language.main
2. In the **Example**, write a working SQL statement that shows how the clause is used (like the `SELECT and `CREATE TABLE` examples below).
3. As a reference, `SELECT` and `CREATE TABLE` are already done for you.

---

### 1. `SELECT`

**Description:** `SELECT *` returns all columns from the provided table. You can also do `SELECT column_name_1, column_name_2` to return specific columns from the provided table.

**Example:**

```sql
SELECT *
FROM movies;
```

### 2. `CREATE TABLE`

**Description:** `CREATE TABLE` creates a new table in a database. It allows one to specify the name of the table, the name of each column, and each column's data type in the table.

**Example:**

```sql
CREATE TABLE friends (
  friend_id SERIAL PRIMARY KEY,
  name VARCHAR,
  birthday DATE
);
```

### 3. `INSERT INTO` — assigned to Deja

**Description:**
`INSERT INTO`is used to add a new record or row to a table.

**Examples:**
The first table inserts data into columns in order:

```sql
INSERT INTO friends
VALUES ('Deja', 19982501);
VALUES ('Diamond', 19960405)
```

The next table inserts data into columns by name:

```sql
INSERT INTO friends (name, birthday)
VALUES ('Deja', 19982501);
VALUES ('Diamond', 19960405)
```

### 4. `UPDATE` — assigned to Rucha

**Description:** `UPDATE` allows you to update data in one or more columns of one or more rows in a table. In this syntax:
we first, specify the name of the table that we want to update data after the UPDATE keyword.
Second, we specify columns and their new values after SET keyword. The columns that do not appear in the SET clause retain their original values.
Third, we determine which rows to update in the condition of the WHERE clause.
The WHERE clause is optional. If we omit the WHERE clause, the UPDATE statement will update all rows in the table.
Courtsey : [Neon documentation](https://neon.com/postgresql/postgresql-tutorial/postgresql-update).

**Example:**

```sql
UPDATE movies
SET genre = 'thriller'
WHERE movie_name = 'The Prestige'
AND year = 2006;
```

### 5. `DELETE FROM` — assigned to Lajoie

**Description**
The `DELETE FROM` removes rows from a table. It's also important to note that a `WHERE` clause can be used to specify which rows to delete. If you omit `WHERE`, all rows in the table will be deleted.

**Example:**

-- Below deletes a single movie by its primary key

```sql
SELECT *
DELETE FROM movies
WHERE movie_id = 42;
```

### 6. `GROUP BY` — assigned to Rachel

**Description:**

`GROUP BY` is used to organize rows that have the same values in one or more columns into groups. It’s most often used with aggregate functions like COUNT(), SUM(), AVG(), MIN(), or MAX()

**Example:**

```sql
SELECT
  director,
  COUNT(*)
FROM
  movies
GROUP BY
  director;
```

### 7. `ORDER BY` — assigned to Tamara

**Description:** Using the `ORDER BY` clause to return the `Price` column and using `ASC` to list prices in ascending order, from lowest to highest. `DESC` can also be used to list prices in descending order, from highest to lowest.

**Example:**

```sql
SELECT * FROM Products
ORDER BY Price ASC;

or

ORDER BY Price DESC;
```

### 8. `INNER JOIN` — assigned to Nicole

**Description:** `INNER JOIN` returns only rows that match on the ON condition in two tables.

(The overlapping circles in the middle of the Venn diagram)

**Example:**

```sql
SELECT *
FROM owners INNER JOIN pets
ON owners.owner_id = pets.owner_id;
```

### 9. `LIMIT` — assigned to Xavier

**Description:** `LIMIT` is a feature that makes sure there is specific amount of data in the _view_ of the schema in SQL when writing a query. This is done by using the `LIMIT` feature at the end of the query before the semi-colon which triggers a limit.

**Example:**

```sql
SELECT *
FROM 'created-table'
ORDER BY DESC 'specific-column-value-chosen'
LIMIT 10;
```

### 10. `ON CONFLICT` — assigned to **\_**

**Description: ON CONFLICT is a feature used in an INSERT statement to handle cases where adding new data would cause a duplicate value error in a column with a unique constraint. This allows SQL to either skip inserting the duplicate (DO NOTHING) or update existing data instead of throwing an error:**

**Example:**

```sql
INSERT INTO saved_countries (country_name)
VALUES ('Mexico')
ON CONFLICT (country_name)
DO NOTHING;
```

### 11. `LIKE` — assigned to **\_**

**Description: LIKE is a feature used in a WHERE clause to search for data that matches a specific pattern within a text column. The % symbol is used as a wildcard for any number of characters, while _ represents a single character.:**

**Example:**

```sql
-- Find all users whose names start with 'La'
SELECT *
FROM users
WHERE name LIKE 'La%';
```
```
-- Find all emails that end with '.com'
SELECT *
FROM users
WHERE email LIKE '%.com';
```